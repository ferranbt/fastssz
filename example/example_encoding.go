// Code generated by fastssz. DO NOT EDIT.
package example

import (
	"fmt"

	ssz "github.com/ferranbt/fastssz"
)

var (
	errDivideInt           = fmt.Errorf("incorrect int divide")
	errListTooBig          = fmt.Errorf("incorrect list size, too big")
	errMarshalDynamicBytes = fmt.Errorf("incorrect dynamic bytes marshalling")
	errMarshalFixedBytes   = fmt.Errorf("incorrect fixed bytes marshalling")
	errMarshalList         = fmt.Errorf("incorrect vector list")
	errMarshalVector       = fmt.Errorf("incorrect vector marshalling")
	errOffset              = fmt.Errorf("incorrect offset")
	errSize                = fmt.Errorf("incorrect size")
)

// MarshalSSZ ssz marshals the AttestationData object
func (a *AttestationData) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, a.SizeSSZ())
	return a.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the AttestationData object to a target array
func (a *AttestationData) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error

	// Field (0) 'Slot'
	dst = ssz.MarshalUint64(dst, a.Slot)

	// Field (1) 'Index'
	dst = ssz.MarshalUint64(dst, a.Index)

	// Field (2) 'BeaconBlockHash'
	if dst, err = ssz.MarshalFixedBytes(dst, a.BeaconBlockHash, 32); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (3) 'Source'
	if dst, err = a.Source.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (4) 'Target'
	if dst, err = a.Target.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the AttestationData object
func (a *AttestationData) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 128 {
		return errSize
	}

	// Field (0) 'Slot'
	a.Slot = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Index'
	a.Index = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'BeaconBlockHash'
	a.BeaconBlockHash = append(a.BeaconBlockHash, buf[16:48]...)

	// Field (3) 'Source'
	if a.Source == nil {
		a.Source = new(Checkpoint)
	}
	if err = a.Source.UnmarshalSSZ(buf[48:88]); err != nil {
		return err
	}

	// Field (4) 'Target'
	if a.Target == nil {
		a.Target = new(Checkpoint)
	}
	if err = a.Target.UnmarshalSSZ(buf[88:128]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the AttestationData object
func (a *AttestationData) SizeSSZ() (size int) {
	size = 128
	return
}
