// Code generated by fastssz. DO NOT EDIT.
package spectests2

import (
	"fmt"

	ssz "github.com/ferranbt/fastssz"
	v1alpha1 "github.com/ferranbt/fastssz/spectests2/aux"
)

var (
	errDivideInt           = fmt.Errorf("incorrect int divide")
	errListTooBig          = fmt.Errorf("incorrect list size, too big")
	errMarshalDynamicBytes = fmt.Errorf("incorrect dynamic bytes marshalling")
	errMarshalFixedBytes   = fmt.Errorf("incorrect fixed bytes marshalling")
	errMarshalList         = fmt.Errorf("incorrect vector list")
	errMarshalVector       = fmt.Errorf("incorrect vector marshalling")
	errOffset              = fmt.Errorf("incorrect offset")
	errSize                = fmt.Errorf("incorrect size")
)

// MarshalSSZ ssz marshals the BeaconState object
func (b *BeaconState) MarshalSSZ() ([]byte, error) {
	buf := make([]byte, b.SizeSSZ())
	return b.MarshalSSZTo(buf[:0])
}

// MarshalSSZTo ssz marshals the BeaconState object to a target array
func (b *BeaconState) MarshalSSZTo(dst []byte) ([]byte, error) {
	var err error
	offset := int(2687337)

	// Field (0) 'GenesisTime'
	dst = ssz.MarshalUint64(dst, b.GenesisTime)

	// Field (1) 'Slot'
	dst = ssz.MarshalUint64(dst, b.Slot)

	// Field (2) 'Fork'
	if dst, err = b.Fork.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (3) 'LatestBlockHeader'
	if dst, err = b.LatestBlockHeader.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (4) 'BlockRoots'
	if len(b.BlockRoots) != 8192 {
		return nil, errMarshalVector
	}
	for ii := 0; ii < 8192; ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, b.BlockRoots[ii], 32); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	// Field (5) 'StateRoots'
	if len(b.StateRoots) != 8192 {
		return nil, errMarshalVector
	}
	for ii := 0; ii < 8192; ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, b.StateRoots[ii], 32); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	// Offset (6) 'HistoricalRoots'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.HistoricalRoots) * 32

	// Field (7) 'Eth1Data'
	if dst, err = b.Eth1Data.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Offset (8) 'Eth1DataVotes'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Eth1DataVotes) * 72

	// Field (9) 'Eth1DepositIndex'
	dst = ssz.MarshalUint64(dst, b.Eth1DepositIndex)

	// Offset (10) 'Validators'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Validators) * 121

	// Offset (11) 'Balances'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(b.Balances) * 8

	// Field (12) 'RandaoMixes'
	if len(b.RandaoMixes) != 65536 {
		return nil, errMarshalVector
	}
	for ii := 0; ii < 65536; ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, b.RandaoMixes[ii], 32); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	// Field (13) 'Slashings'
	if len(b.Slashings) != 8192 {
		return nil, errMarshalVector
	}
	for ii := 0; ii < 8192; ii++ {
		dst = ssz.MarshalUint64(dst, b.Slashings[ii])
	}

	// Offset (14) 'PreviousEpochAttestations'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(b.PreviousEpochAttestations); ii++ {
		offset += 4
		offset += b.PreviousEpochAttestations[ii].SizeSSZ()
	}

	// Offset (15) 'CurrentEpochAttestations'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(b.CurrentEpochAttestations); ii++ {
		offset += 4
		offset += b.CurrentEpochAttestations[ii].SizeSSZ()
	}

	// Field (16) 'JustificationBits'
	if dst, err = ssz.MarshalFixedBytes(dst, b.JustificationBits, 1); err != nil {
		return nil, errMarshalFixedBytes
	}

	// Field (17) 'PreviousJustifiedCheckpoint'
	if dst, err = b.PreviousJustifiedCheckpoint.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (18) 'CurrentJustifiedCheckpoint'
	if dst, err = b.CurrentJustifiedCheckpoint.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (19) 'FinalizedCheckpoint'
	if dst, err = b.FinalizedCheckpoint.MarshalSSZTo(dst); err != nil {
		return nil, err
	}

	// Field (6) 'HistoricalRoots'
	if len(b.HistoricalRoots) > 16777216 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(b.HistoricalRoots); ii++ {
		if dst, err = ssz.MarshalFixedBytes(dst, b.HistoricalRoots[ii], 32); err != nil {
			return nil, errMarshalFixedBytes
		}
	}

	// Field (8) 'Eth1DataVotes'
	if len(b.Eth1DataVotes) > 1024 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(b.Eth1DataVotes); ii++ {
		if dst, err = b.Eth1DataVotes[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (10) 'Validators'
	if len(b.Validators) > 1099511627776 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(b.Validators); ii++ {
		if dst, err = b.Validators[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (11) 'Balances'
	if len(b.Balances) > 1099511627776 {
		return nil, errMarshalList
	}
	for ii := 0; ii < len(b.Balances); ii++ {
		dst = ssz.MarshalUint64(dst, b.Balances[ii])
	}

	// Field (14) 'PreviousEpochAttestations'
	if len(b.PreviousEpochAttestations) > 4096 {
		return nil, errMarshalList
	}
	{
		offset = 4 * len(b.PreviousEpochAttestations)
		for ii := 0; ii < len(b.PreviousEpochAttestations); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += b.PreviousEpochAttestations[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(b.PreviousEpochAttestations); ii++ {
		if dst, err = b.PreviousEpochAttestations[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	// Field (15) 'CurrentEpochAttestations'
	if len(b.CurrentEpochAttestations) > 4096 {
		return nil, errMarshalList
	}
	{
		offset = 4 * len(b.CurrentEpochAttestations)
		for ii := 0; ii < len(b.CurrentEpochAttestations); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += b.CurrentEpochAttestations[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(b.CurrentEpochAttestations); ii++ {
		if dst, err = b.CurrentEpochAttestations[ii].MarshalSSZTo(dst); err != nil {
			return nil, err
		}
	}

	return dst, err
}

// UnmarshalSSZ ssz unmarshals the BeaconState object
func (b *BeaconState) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 2687337 {
		return errSize
	}

	tail := buf
	var o6, o8, o10, o11, o14, o15 uint64

	// Field (0) 'GenesisTime'
	b.GenesisTime = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Slot'
	b.Slot = ssz.UnmarshallUint64(buf[8:16])

	// Field (2) 'Fork'
	if b.Fork == nil {
		b.Fork = new(Fork)
	}
	if err = b.Fork.UnmarshalSSZ(buf[16:32]); err != nil {
		return err
	}

	// Field (3) 'LatestBlockHeader'
	if b.LatestBlockHeader == nil {
		b.LatestBlockHeader = new(v1alpha1.BeaconBlockHeader)
	}
	if err = b.LatestBlockHeader.UnmarshalSSZ(buf[32:136]); err != nil {
		return err
	}

	// Field (4) 'BlockRoots'
	b.BlockRoots = make([][]byte, 8192)
	for ii := 0; ii < 8192; ii++ {
		b.BlockRoots[ii] = append(b.BlockRoots[ii], buf[136:262280][ii*32:(ii+1)*32]...)
	}

	// Field (5) 'StateRoots'
	b.StateRoots = make([][]byte, 8192)
	for ii := 0; ii < 8192; ii++ {
		b.StateRoots[ii] = append(b.StateRoots[ii], buf[262280:524424][ii*32:(ii+1)*32]...)
	}

	// Offset (6) 'HistoricalRoots'
	if o6 = ssz.ReadOffset(buf[524424:524428]); o6 > size {
		return errOffset
	}

	// Field (7) 'Eth1Data'
	if b.Eth1Data == nil {
		b.Eth1Data = new(v1alpha1.Eth1Data)
	}
	if err = b.Eth1Data.UnmarshalSSZ(buf[524428:524500]); err != nil {
		return err
	}

	// Offset (8) 'Eth1DataVotes'
	if o8 = ssz.ReadOffset(buf[524500:524504]); o8 > size || o6 > o8 {
		return errOffset
	}

	// Field (9) 'Eth1DepositIndex'
	b.Eth1DepositIndex = ssz.UnmarshallUint64(buf[524504:524512])

	// Offset (10) 'Validators'
	if o10 = ssz.ReadOffset(buf[524512:524516]); o10 > size || o8 > o10 {
		return errOffset
	}

	// Offset (11) 'Balances'
	if o11 = ssz.ReadOffset(buf[524516:524520]); o11 > size || o10 > o11 {
		return errOffset
	}

	// Field (12) 'RandaoMixes'
	b.RandaoMixes = make([][]byte, 65536)
	for ii := 0; ii < 65536; ii++ {
		b.RandaoMixes[ii] = append(b.RandaoMixes[ii], buf[524520:2621672][ii*32:(ii+1)*32]...)
	}

	// Field (13) 'Slashings'
	b.Slashings = ssz.ExtendUint64(b.Slashings, 8192)
	for ii := 0; ii < 8192; ii++ {
		b.Slashings[ii] = ssz.UnmarshallUint64(buf[2621672:2687208][ii*8 : (ii+1)*8])
	}

	// Offset (14) 'PreviousEpochAttestations'
	if o14 = ssz.ReadOffset(buf[2687208:2687212]); o14 > size || o11 > o14 {
		return errOffset
	}

	// Offset (15) 'CurrentEpochAttestations'
	if o15 = ssz.ReadOffset(buf[2687212:2687216]); o15 > size || o14 > o15 {
		return errOffset
	}

	// Field (16) 'JustificationBits'
	b.JustificationBits = append(b.JustificationBits, buf[2687216:2687217]...)

	// Field (17) 'PreviousJustifiedCheckpoint'
	if b.PreviousJustifiedCheckpoint == nil {
		b.PreviousJustifiedCheckpoint = new(v1alpha1.Checkpoint)
	}
	if err = b.PreviousJustifiedCheckpoint.UnmarshalSSZ(buf[2687217:2687257]); err != nil {
		return err
	}

	// Field (18) 'CurrentJustifiedCheckpoint'
	if b.CurrentJustifiedCheckpoint == nil {
		b.CurrentJustifiedCheckpoint = new(v1alpha1.Checkpoint)
	}
	if err = b.CurrentJustifiedCheckpoint.UnmarshalSSZ(buf[2687257:2687297]); err != nil {
		return err
	}

	// Field (19) 'FinalizedCheckpoint'
	if b.FinalizedCheckpoint == nil {
		b.FinalizedCheckpoint = new(v1alpha1.Checkpoint)
	}
	if err = b.FinalizedCheckpoint.UnmarshalSSZ(buf[2687297:2687337]); err != nil {
		return err
	}

	// Field (6) 'HistoricalRoots'
	{
		buf = tail[o6:o8]
		num, ok := ssz.DivideInt(len(buf), 32)
		if !ok {
			return errDivideInt
		}
		if num > 16777216 {
			return errListTooBig
		}
		b.HistoricalRoots = make([][]byte, num)
		for ii := 0; ii < num; ii++ {
			b.HistoricalRoots[ii] = append(b.HistoricalRoots[ii], buf[ii*32:(ii+1)*32]...)
		}
	}

	// Field (8) 'Eth1DataVotes'
	{
		buf = tail[o8:o10]
		num, ok := ssz.DivideInt(len(buf), 72)
		if !ok {
			return errDivideInt
		}
		if num > 1024 {
			return errListTooBig
		}
		b.Eth1DataVotes = make([]*v1alpha1.Eth1Data, num)
		for ii := 0; ii < num; ii++ {
			if b.Eth1DataVotes[ii] == nil {
				b.Eth1DataVotes[ii] = new(v1alpha1.Eth1Data)
			}
			if err = b.Eth1DataVotes[ii].UnmarshalSSZ(buf[ii*72 : (ii+1)*72]); err != nil {
				return err
			}
		}
	}

	// Field (10) 'Validators'
	{
		buf = tail[o10:o11]
		num, ok := ssz.DivideInt(len(buf), 121)
		if !ok {
			return errDivideInt
		}
		if num > 1099511627776 {
			return errListTooBig
		}
		b.Validators = make([]*v1alpha1.Validator, num)
		for ii := 0; ii < num; ii++ {
			if b.Validators[ii] == nil {
				b.Validators[ii] = new(v1alpha1.Validator)
			}
			if err = b.Validators[ii].UnmarshalSSZ(buf[ii*121 : (ii+1)*121]); err != nil {
				return err
			}
		}
	}

	// Field (11) 'Balances'
	{
		buf = tail[o11:o14]
		num, ok := ssz.DivideInt(len(buf), 8)
		if !ok {
			return errDivideInt
		}
		if num > 1099511627776 {
			return errListTooBig
		}
		b.Balances = ssz.ExtendUint64(b.Balances, num)
		for ii := 0; ii < num; ii++ {
			b.Balances[ii] = ssz.UnmarshallUint64(buf[ii*8 : (ii+1)*8])
		}
	}

	// Field (14) 'PreviousEpochAttestations'
	{
		buf = tail[o14:o15]
		num, err := ssz.DecodeDynamicLength(buf, 4096)
		if err != nil {
			return err
		}
		b.PreviousEpochAttestations = make([]*v1alpha1.PendingAttestation, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if b.PreviousEpochAttestations[indx] == nil {
				b.PreviousEpochAttestations[indx] = new(v1alpha1.PendingAttestation)
			}
			if err = b.PreviousEpochAttestations[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (15) 'CurrentEpochAttestations'
	{
		buf = tail[o15:]
		num, err := ssz.DecodeDynamicLength(buf, 4096)
		if err != nil {
			return err
		}
		b.CurrentEpochAttestations = make([]*v1alpha1.PendingAttestation, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if b.CurrentEpochAttestations[indx] == nil {
				b.CurrentEpochAttestations[indx] = new(v1alpha1.PendingAttestation)
			}
			if err = b.CurrentEpochAttestations[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the BeaconState object
func (b *BeaconState) SizeSSZ() (size int) {
	size = 2687337

	// Field (6) 'HistoricalRoots'
	size += len(b.HistoricalRoots) * 32

	// Field (8) 'Eth1DataVotes'
	size += len(b.Eth1DataVotes) * 72

	// Field (10) 'Validators'
	size += len(b.Validators) * 121

	// Field (11) 'Balances'
	size += len(b.Balances) * 8

	// Field (14) 'PreviousEpochAttestations'
	for ii := 0; ii < len(b.PreviousEpochAttestations); ii++ {
		size += 4
		size += b.PreviousEpochAttestations[ii].SizeSSZ()
	}

	// Field (15) 'CurrentEpochAttestations'
	for ii := 0; ii < len(b.CurrentEpochAttestations); ii++ {
		size += 4
		size += b.CurrentEpochAttestations[ii].SizeSSZ()
	}

	return
}
