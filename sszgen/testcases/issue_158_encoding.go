// Code generated by fastssz. DO NOT EDIT.
// Hash: 21b78bac9121e91476779bed8a3475749aa30b687574d8441bafa8fe3c1e4621
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Issue158 object
func (i *Issue158) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Issue158 object to a target array
func (i *Issue158) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Field'
	if dst, err = i.Field.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Issue158 object
func (i *Issue158) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 0 {
		return ssz.ErrSize
	}

	// Field (0) 'Field'
	if err := i.Field.UnmarshalSSZ(buf[0:0]); err != nil {
		return err
	}

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Issue158 object
func (i *Issue158) SizeSSZ() (size int) {
	size = 0
	return
}

// HashTreeRoot ssz hashes the Issue158 object
func (i *Issue158) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Issue158 object with a hasher
func (i *Issue158) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Field'
	if err = i.Field.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Issue158 object
func (i *Issue158) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
