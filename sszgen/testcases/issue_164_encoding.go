// Code generated by fastssz. DO NOT EDIT.
// Hash: b3339b279d2d62eb72d4f5dbd7308c42f2ac6f9c102b9e314c7ecc746afc70d7
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Issue64 object
func (i *Issue64) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Issue64 object to a target array
func (i *Issue64) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'FeeRecipientAddress'
	dst = append(dst, i.FeeRecipientAddress[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Issue64 object
func (i *Issue64) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(i, buf)
}

// UnmarshalSSZTail unmarshals the Issue64 object and returns the remaining bufferÂº
func (i *Issue64) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := i.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	// Field (0) 'FeeRecipientAddress'
	buf = ssz.UnmarshalFixedBytes(i.FeeRecipientAddress[:], buf)

	return buf, nil
}

// fixedSize returns the fixed size of the Issue64 object
func (i *Issue64) fixedSize() int {
	return int(120)
}

// SizeSSZ returns the ssz encoded size in bytes for the Issue64 object
func (i *Issue64) SizeSSZ() (size int) {
	size = i.fixedSize()
	return
}

// HashTreeRoot ssz hashes the Issue64 object
func (i *Issue64) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Issue64 object with a hasher
func (i *Issue64) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'FeeRecipientAddress'
	hh.PutBytes(i.FeeRecipientAddress[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Issue64 object
func (i *Issue64) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
