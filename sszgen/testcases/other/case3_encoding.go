// Code generated by fastssz. DO NOT EDIT.
// Hash: 6490f11f815acc14fad304d8132c076222645a9159aca1f7cca2c6e0caa56b00
// Version: 2.0.0
package other

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Case3B object
func (c *Case3B) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Case3B object to a target array
func (c *Case3B) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	return
}

// UnmarshalSSZ ssz unmarshals the Case3B object
func (c *Case3B) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(c, buf)
}

// UnmarshalSSZTail unmarshals the Case3B object and returns the remaining bufferÂº
func (c *Case3B) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := c.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	return buf, nil
}

// fixedSize returns the fixed size of the Case3B object
func (c *Case3B) fixedSize() int {
	return int(0)
}

// SizeSSZ returns the ssz encoded size in bytes for the Case3B object
func (c *Case3B) SizeSSZ() (size int) {
	size = c.fixedSize()
	return
}

// HashTreeRoot ssz hashes the Case3B object
func (c *Case3B) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Case3B object with a hasher
func (c *Case3B) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Case3B object
func (c *Case3B) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
