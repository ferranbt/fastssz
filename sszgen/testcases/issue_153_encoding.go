// Code generated by fastssz. DO NOT EDIT.
// Hash: 79f47285556318ad7e6f95ff5e2b595cd71cfb14b6b34c05a393fd78b212ecd7
// Version: 0.1.3
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Issue153 object
func (i *Issue153) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Issue153 object to a target array
func (i *Issue153) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(84)

	// Field (0) 'Value1'
	dst = append(dst, i.Value1[:]...)

	// Offset (1) 'Value2'
	dst = ssz.WriteOffset(dst, offset)

	// Field (2) 'Value'
	dst = append(dst, i.Value[:]...)

	// Field (1) 'Value2'
	dst = append(dst, i.Value2[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Issue153 object
func (i *Issue153) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 84 {
		return ssz.ErrSize
	}

	tail := buf
	var o1 uint64

	// Field (0) 'Value1'
	copy(i.Value1[:], buf[0:32])

	// Offset (1) 'Value2'
	if o1 = ssz.ReadOffset(buf[32:36]); o1 > size {
		return ssz.ErrOffset
	}

	if o1 < 84 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (2) 'Value'
	copy(i.Value[:], buf[36:84])

	// Field (1) 'Value2'
	{
		buf = tail[o1:]
		copy(i.Value2[:], buf)
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Issue153 object
func (i *Issue153) SizeSSZ() (size int) {
	size = 84

	// Field (1) 'Value2'
	size += len(i.Value2)

	return
}

// HashTreeRoot ssz hashes the Issue153 object
func (i *Issue153) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Issue153 object with a hasher
func (i *Issue153) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Value1'
	hh.PutBytes(i.Value1[:])

	// Field (1) 'Value2'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(i.Value2[:]))
		if byteLen > 0 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(i.Value2[:])
		hh.MerkleizeWithMixin(elemIndx, byteLen, (0+31)/32)
	}

	// Field (2) 'Value'
	hh.PutBytes(i.Value[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Issue153 object
func (i *Issue153) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
