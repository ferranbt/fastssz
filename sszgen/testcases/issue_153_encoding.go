// Code generated by fastssz. DO NOT EDIT.
// Hash: 0be3310dcd7d03b0dd6d484dc86d67aaab4647ea37eb2e3e178ecba2946529c9
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Issue153 object
func (i *Issue153) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Issue153 object to a target array
func (i *Issue153) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Value1'
	dst = append(dst, i.Value1[:]...)

	// Field (1) 'Value2'
	dst = append(dst, i.Value2[:]...)

	// Field (2) 'Value'
	dst = append(dst, i.Value[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Issue153 object
func (i *Issue153) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(i, buf)
}

// UnmarshalSSZTail unmarshals the Issue153 object and returns the remaining bufferÂº
func (i *Issue153) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := i.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	// Field (0) 'Value1'
	buf = ssz.UnmarshalFixedBytes(i.Value1[:], buf)

	// Field (1) 'Value2'
	buf = ssz.UnmarshalFixedBytes(i.Value2[:], buf)

	// Field (2) 'Value'
	buf = ssz.UnmarshalFixedBytes(i.Value[:], buf)

	return buf, nil
}

// fixedSize returns the fixed size of the Issue153 object
func (i *Issue153) fixedSize() int {
	return int(128)
}

// SizeSSZ returns the ssz encoded size in bytes for the Issue153 object
func (i *Issue153) SizeSSZ() (size int) {
	size = i.fixedSize()
	return
}

// HashTreeRoot ssz hashes the Issue153 object
func (i *Issue153) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Issue153 object with a hasher
func (i *Issue153) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Value1'
	hh.PutBytes(i.Value1[:])

	// Field (1) 'Value2'
	hh.PutBytes(i.Value2[:])

	// Field (2) 'Value'
	hh.PutBytes(i.Value[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Issue153 object
func (i *Issue153) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
