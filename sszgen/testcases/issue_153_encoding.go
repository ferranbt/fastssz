// Code generated by fastssz. DO NOT EDIT.
// Hash: 0be3310dcd7d03b0dd6d484dc86d67aaab4647ea37eb2e3e178ecba2946529c9
// Version: 0.1.3
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Issue153 object
func (i *Issue153) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Issue153 object to a target array
func (i *Issue153) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Value1'
	dst = append(dst, i.Value1[:]...)

	// Field (1) 'Value2'
	dst = append(dst, i.Value2[:]...)

	// Field (2) 'Value'
	dst = append(dst, i.Value[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Issue153 object
func (i *Issue153) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 128 {
		return ssz.ErrSize
	}

	// Field (0) 'Value1'
	copy(i.Value1[:], buf[0:32])

	// Field (1) 'Value2'
	copy(i.Value2[:], buf[32:80])

	// Field (2) 'Value'
	copy(i.Value[:], buf[80:128])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Issue153 object
func (i *Issue153) SizeSSZ() (size int) {
	size = 128
	return
}

// HashTreeRoot ssz hashes the Issue153 object
func (i *Issue153) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Issue153 object with a hasher
func (i *Issue153) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Value1'
	hh.PutBytes(i.Value1[:])

	// Field (1) 'Value2'
	hh.PutBytes(i.Value2[:])

	// Field (2) 'Value'
	hh.PutBytes(i.Value[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Issue153 object
func (i *Issue153) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
