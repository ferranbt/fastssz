// Code generated by fastssz. DO NOT EDIT.
// Hash: 7d191912ad4d9d8f069f503d82d98d5011cfa1e35dfe0a2e7378082bb6ae8b1d
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the BytesWrapper object
func (b *BytesWrapper) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(b)
}

// MarshalSSZTo ssz marshals the BytesWrapper object to a target array
func (b *BytesWrapper) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Bytes'
	if size := uint64(len(b.Bytes)); size != 48 {
		err = ssz.ErrBytesLengthFn("BytesWrapper.Bytes", size, 48)
		return
	}
	dst = append(dst, b.Bytes...)

	return
}

// UnmarshalSSZ ssz unmarshals the BytesWrapper object
func (b *BytesWrapper) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(b, buf)
}

// UnmarshalSSZTail unmarshals the BytesWrapper object and returns the remaining bufferº
func (b *BytesWrapper) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := b.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	// Field (0) 'Bytes'
	b.Bytes, buf = ssz.UnmarshalBytes(b.Bytes, buf, 48)

	return buf, nil
}

// fixedSize returns the fixed size of the BytesWrapper object
func (b *BytesWrapper) fixedSize() int {
	return int(48)
}

// SizeSSZ returns the ssz encoded size in bytes for the BytesWrapper object
func (b *BytesWrapper) SizeSSZ() (size int) {
	size = b.fixedSize()
	return
}

// HashTreeRoot ssz hashes the BytesWrapper object
func (b *BytesWrapper) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(b)
}

// HashTreeRootWith ssz hashes the BytesWrapper object with a hasher
func (b *BytesWrapper) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Bytes'
	if size := uint64(len(b.Bytes)); size != 48 {
		err = ssz.ErrBytesLengthFn("BytesWrapper.Bytes", size, 48)
		return
	}
	hh.PutBytes(b.Bytes)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the BytesWrapper object
func (b *BytesWrapper) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(b)
}

// MarshalSSZ ssz marshals the ListC object
func (l *ListC) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the ListC object to a target array
func (l *ListC) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := l.fixedSize()

	// Offset (0) 'Elems'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Elems'
	if size := uint64(len(l.Elems)); size > 32 {
		err = ssz.ErrListTooBigFn("ListC.Elems", size, 32)
		return
	}
	for ii := 0; ii < len(l.Elems); ii++ {
		if dst, err = l.Elems[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ListC object
func (l *ListC) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(l, buf)
}

// UnmarshalSSZTail unmarshals the ListC object and returns the remaining bufferº
func (l *ListC) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := l.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	tail := buf
	var o0 uint64
	marker := ssz.NewOffsetMarker(uint64(size), uint64(fixedSize))

	// Offset (0) 'Elems'
	if o0, _, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Field (0) 'Elems'
	if err = ssz.UnmarshalSliceWithIndexCallback(&l.Elems, tail[o0:], 48, 32, func(ii uint64, buf []byte) (err error) {
		if buf, err = l.Elems[ii].UnmarshalSSZTail(buf); err != nil {
			return
		}
		return nil
	}); err != nil {
		return nil, err
	}

	return
}

// fixedSize returns the fixed size of the ListC object
func (l *ListC) fixedSize() int {
	return int(4)
}

// SizeSSZ returns the ssz encoded size in bytes for the ListC object
func (l *ListC) SizeSSZ() (size int) {
	size = l.fixedSize()

	// Field (0) 'Elems'
	size += len(l.Elems) * 48

	return
}

// HashTreeRoot ssz hashes the ListC object
func (l *ListC) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the ListC object with a hasher
func (l *ListC) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Elems'
	{
		subIndx := hh.Index()
		num := uint64(len(l.Elems))
		if num > 32 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range l.Elems {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ListC object
func (l *ListC) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}

// MarshalSSZ ssz marshals the ListP object
func (l *ListP) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(l)
}

// MarshalSSZTo ssz marshals the ListP object to a target array
func (l *ListP) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := l.fixedSize()

	// Offset (0) 'Elems'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Elems'
	if size := uint64(len(l.Elems)); size > 32 {
		err = ssz.ErrListTooBigFn("ListP.Elems", size, 32)
		return
	}
	for ii := 0; ii < len(l.Elems); ii++ {
		if dst, err = l.Elems[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ListP object
func (l *ListP) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(l, buf)
}

// UnmarshalSSZTail unmarshals the ListP object and returns the remaining bufferº
func (l *ListP) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := l.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	tail := buf
	var o0 uint64
	marker := ssz.NewOffsetMarker(uint64(size), uint64(fixedSize))

	// Offset (0) 'Elems'
	if o0, _, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Field (0) 'Elems'
	if err = ssz.UnmarshalSliceSSZ(&l.Elems, tail[o0:], 32); err != nil {
		return nil, err
	}

	return
}

// fixedSize returns the fixed size of the ListP object
func (l *ListP) fixedSize() int {
	return int(4)
}

// SizeSSZ returns the ssz encoded size in bytes for the ListP object
func (l *ListP) SizeSSZ() (size int) {
	size = l.fixedSize()

	// Field (0) 'Elems'
	size += len(l.Elems) * 48

	return
}

// HashTreeRoot ssz hashes the ListP object
func (l *ListP) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(l)
}

// HashTreeRootWith ssz hashes the ListP object with a hasher
func (l *ListP) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Elems'
	{
		subIndx := hh.Index()
		num := uint64(len(l.Elems))
		if num > 32 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range l.Elems {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ListP object
func (l *ListP) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(l)
}
