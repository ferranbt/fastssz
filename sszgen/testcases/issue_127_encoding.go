// Code generated by fastssz. DO NOT EDIT.
// Hash: 750872c96c19534fb8b8f52e6a588fa19a3edac30cd15de2114e7c5a9a5963bb
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Obj2 object
func (o *Obj2) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(o)
}

// MarshalSSZTo ssz marshals the Obj2 object to a target array
func (o *Obj2) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := o.fixedSize()

	// Offset (0) 'T1'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'T1'
	if size := uint64(len(o.T1)); size > 1024 {
		err = ssz.ErrListTooBigFn("Obj2.T1", size, 1024)
		return
	}
	{
		offset = 4 * len(o.T1)
		for ii := 0; ii < len(o.T1); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += len(o.T1[ii])
		}
	}
	for ii := 0; ii < len(o.T1); ii++ {
		if size := uint64(len(o.T1[ii])); size > 256 {
			err = ssz.ErrBytesLengthFn("Obj2.T1[ii]", size, 256)
			return
		}
		dst = append(dst, o.T1[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Obj2 object
func (o *Obj2) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(o, buf)
}

// UnmarshalSSZTail unmarshals the Obj2 object and returns the remaining bufferÂº
func (o *Obj2) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := o.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	tail := buf
	var o0 uint64
	marker := ssz.NewOffsetMarker(uint64(size), uint64(fixedSize))

	// Offset (0) 'T1'
	if o0, _, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Field (0) 'T1'
	if err = ssz.UnmarshalDynamicSliceWithCallback(&o.T1, tail[o0:], 1024, func(indx uint64, buf []byte) (err error) {
		if o.T1[indx], err = ssz.UnmarshalDynamicBytes(o.T1[indx], buf, 256); err != nil {
			return
		}
		return nil
	}); err != nil {
		return nil, err
	}

	return
}

// fixedSize returns the fixed size of the Obj2 object
func (o *Obj2) fixedSize() int {
	return int(4)
}

// SizeSSZ returns the ssz encoded size in bytes for the Obj2 object
func (o *Obj2) SizeSSZ() (size int) {
	size = o.fixedSize()

	// Field (0) 'T1'
	for ii := 0; ii < len(o.T1); ii++ {
		size += 4
		size += len(o.T1[ii])
	}

	return
}

// HashTreeRoot ssz hashes the Obj2 object
func (o *Obj2) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(o)
}

// HashTreeRootWith ssz hashes the Obj2 object with a hasher
func (o *Obj2) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'T1'
	{
		subIndx := hh.Index()
		num := uint64(len(o.T1))
		if num > 1024 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range o.T1 {
			{
				elemIndx := hh.Index()
				byteLen := uint64(len(elem))
				if byteLen > 256 {
					err = ssz.ErrIncorrectListSize
					return
				}
				hh.AppendBytes32(elem)
				hh.MerkleizeWithMixin(elemIndx, byteLen, (256+31)/32)
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 1024)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Obj2 object
func (o *Obj2) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(o)
}
