// Code generated by fastssz. DO NOT EDIT.
// Hash: 849887b610983adf4efa1abfd912b25aa4f0ffbde8211f1e3909136539b1c2d9
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Case1A object
func (c *Case1A) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Case1A object to a target array
func (c *Case1A) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := c.fixedSize()

	// Offset (0) 'Foo'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Foo'
	if size := uint64(len(c.Foo)); size > 2048 {
		err = ssz.ErrBytesLengthFn("Case1A.Foo", size, 2048)
		return
	}
	dst = append(dst, c.Foo...)

	return
}

// UnmarshalSSZ ssz unmarshals the Case1A object
func (c *Case1A) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(c, buf)
}

// UnmarshalSSZTail unmarshals the Case1A object and returns the remaining bufferº
func (c *Case1A) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := c.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	tail := buf
	var o0 uint64
	marker := ssz.NewOffsetMarker(uint64(size), uint64(fixedSize))

	// Offset (0) 'Foo'
	if o0, buf, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Field (0) 'Foo'
	if c.Foo, err = ssz.UnmarshalDynamicBytes(c.Foo, tail[o0:], 2048); err != nil {
		return
	}

	return
}

// fixedSize returns the fixed size of the Case1A object
func (c *Case1A) fixedSize() int {
	return int(2048)
}

// SizeSSZ returns the ssz encoded size in bytes for the Case1A object
func (c *Case1A) SizeSSZ() (size int) {
	size = c.fixedSize()

	// Field (0) 'Foo'
	size += len(c.Foo)

	return
}

// HashTreeRoot ssz hashes the Case1A object
func (c *Case1A) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Case1A object with a hasher
func (c *Case1A) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Foo'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(c.Foo))
		if byteLen > 2048 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(c.Foo)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (2048+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Case1A object
func (c *Case1A) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}

// MarshalSSZ ssz marshals the Case1B object
func (c *Case1B) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Case1B object to a target array
func (c *Case1B) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := c.fixedSize()

	// Offset (0) 'Bar'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Bar'
	if size := uint64(len(c.Bar)); size > 32 {
		err = ssz.ErrBytesLengthFn("Case1B.Bar", size, 32)
		return
	}
	dst = append(dst, c.Bar...)

	return
}

// UnmarshalSSZ ssz unmarshals the Case1B object
func (c *Case1B) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(c, buf)
}

// UnmarshalSSZTail unmarshals the Case1B object and returns the remaining bufferº
func (c *Case1B) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := c.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	tail := buf
	var o0 uint64
	marker := ssz.NewOffsetMarker(uint64(size), uint64(fixedSize))

	// Offset (0) 'Bar'
	if o0, buf, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Field (0) 'Bar'
	if c.Bar, err = ssz.UnmarshalDynamicBytes(c.Bar, tail[o0:], 32); err != nil {
		return
	}

	return
}

// fixedSize returns the fixed size of the Case1B object
func (c *Case1B) fixedSize() int {
	return int(32)
}

// SizeSSZ returns the ssz encoded size in bytes for the Case1B object
func (c *Case1B) SizeSSZ() (size int) {
	size = c.fixedSize()

	// Field (0) 'Bar'
	size += len(c.Bar)

	return
}

// HashTreeRoot ssz hashes the Case1B object
func (c *Case1B) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Case1B object with a hasher
func (c *Case1B) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Bar'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(c.Bar))
		if byteLen > 32 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(c.Bar)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (32+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Case1B object
func (c *Case1B) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
