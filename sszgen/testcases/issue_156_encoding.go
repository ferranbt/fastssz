// Code generated by fastssz. DO NOT EDIT.
// Hash: 4960a375e0ad019eea18fccec1a49fdc836eb4501cb583d468d27678ad1e8a49
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Issue156 object
func (i *Issue156) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Issue156 object to a target array
func (i *Issue156) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'A'
	dst = append(dst, i.A[:]...)

	// Field (1) 'A2'
	dst = append(dst, i.A2[:]...)

	// Field (2) 'A3'
	dst = append(dst, i.A3[:]...)

	// Field (3) 'A4'
	if size := len(i.A4); size != 32 {
		err = ssz.ErrBytesLengthFn("Issue156.A4", size, 32)
		return
	}
	dst = append(dst, i.A4...)

	return
}

// UnmarshalSSZ ssz unmarshals the Issue156 object
func (i *Issue156) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(i, buf)
}

// UnmarshalSSZTail unmarshals the Issue156 object and returns the remaining bufferÂº
func (i *Issue156) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := i.SizeSSZ(false)
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	// Field (0) 'A'
	buf = ssz.UnmarshalFixedBytes(i.A[:], buf)

	// Field (1) 'A2'
	buf = ssz.UnmarshalFixedBytes(i.A2[:], buf)

	// Field (2) 'A3'
	buf = ssz.UnmarshalFixedBytes(i.A3[:], buf)

	// Field (3) 'A4'
	i.A4, buf = ssz.UnmarshalBytes(i.A4, buf, 32)

	return buf, nil
}

// SizeSSZ returns the ssz encoded size in bytes for the Issue156 object
func (i *Issue156) SizeSSZ(includeDynamic bool) (size int) {
	size = (128)
	return
}

// HashTreeRoot ssz hashes the Issue156 object
func (i *Issue156) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Issue156 object with a hasher
func (i *Issue156) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'A'
	hh.PutBytes(i.A[:])

	// Field (1) 'A2'
	hh.PutBytes(i.A2[:])

	// Field (2) 'A3'
	hh.PutBytes(i.A3[:])

	// Field (3) 'A4'
	if size := len(i.A4); size != 32 {
		err = ssz.ErrBytesLengthFn("Issue156.A4", size, 32)
		return
	}
	hh.PutBytes(i.A4)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Issue156 object
func (i *Issue156) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
