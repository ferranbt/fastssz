// Code generated by fastssz. DO NOT EDIT.
// Hash: b7954a591c90a779b7ebb94dc3fc01dd3746fbd5af89e9b2d90839d8eea4acc2
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the IntegrationUint object
func (i *IntegrationUint) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the IntegrationUint object to a target array
func (i *IntegrationUint) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := i.fixedSize()

	// Field (0) 'A'
	dst = ssz.MarshalValue(dst, i.A)

	// Field (1) 'B'
	dst = ssz.MarshalValue(dst, i.B)

	// Field (2) 'C'
	dst = ssz.MarshalValue(dst, i.C)

	// Field (3) 'D'
	dst = ssz.MarshalValue(dst, i.D)

	// Offset (4) 'A1'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(i.A1) * 1

	// Offset (5) 'A2'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(i.A2) * 2

	// Offset (6) 'A3'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(i.A3) * 4

	// Offset (7) 'A4'
	dst = ssz.WriteOffset(dst, offset)

	// Field (4) 'A1'
	if size := uint64(len(i.A1)); size > 400 {
		err = ssz.ErrListTooBigFn("IntegrationUint.A1", size, 400)
		return
	}
	for ii := 0; ii < len(i.A1); ii++ {
		dst = ssz.MarshalValue(dst, i.A1[ii])
	}

	// Field (5) 'A2'
	if size := uint64(len(i.A2)); size > 400 {
		err = ssz.ErrListTooBigFn("IntegrationUint.A2", size, 400)
		return
	}
	for ii := 0; ii < len(i.A2); ii++ {
		dst = ssz.MarshalValue(dst, i.A2[ii])
	}

	// Field (6) 'A3'
	if size := uint64(len(i.A3)); size > 400 {
		err = ssz.ErrListTooBigFn("IntegrationUint.A3", size, 400)
		return
	}
	for ii := 0; ii < len(i.A3); ii++ {
		dst = ssz.MarshalValue(dst, i.A3[ii])
	}

	// Field (7) 'A4'
	if size := uint64(len(i.A4)); size > 400 {
		err = ssz.ErrListTooBigFn("IntegrationUint.A4", size, 400)
		return
	}
	for ii := 0; ii < len(i.A4); ii++ {
		dst = ssz.MarshalValue(dst, i.A4[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the IntegrationUint object
func (i *IntegrationUint) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(i, buf)
}

// UnmarshalSSZTail unmarshals the IntegrationUint object and returns the remaining bufferÂº
func (i *IntegrationUint) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := i.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	tail := buf
	var o4, o5, o6, o7 uint64
	marker := ssz.NewOffsetMarker(uint64(size), uint64(fixedSize))

	// Field (0) 'A'
	i.A, buf = ssz.UnmarshallValue[uint8](buf)

	// Field (1) 'B'
	i.B, buf = ssz.UnmarshallValue[uint16](buf)

	// Field (2) 'C'
	i.C, buf = ssz.UnmarshallValue[uint32](buf)

	// Field (3) 'D'
	i.D, buf = ssz.UnmarshallValue[uint64](buf)

	// Offset (4) 'A1'
	if o4, buf, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Offset (5) 'A2'
	if o5, buf, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Offset (6) 'A3'
	if o6, buf, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Offset (7) 'A4'
	if o7, _, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Field (4) 'A1'
	if err = ssz.UnmarshalSliceWithIndexCallback(&i.A1, tail[o4:o5], 1, 400, func(ii uint64, buf []byte) (err error) {
		i.A1[ii], buf = ssz.UnmarshallValue[uint8](buf)
		return nil
	}); err != nil {
		return nil, err
	}

	// Field (5) 'A2'
	if err = ssz.UnmarshalSliceWithIndexCallback(&i.A2, tail[o5:o6], 2, 400, func(ii uint64, buf []byte) (err error) {
		i.A2[ii], buf = ssz.UnmarshallValue[uint16](buf)
		return nil
	}); err != nil {
		return nil, err
	}

	// Field (6) 'A3'
	if err = ssz.UnmarshalSliceWithIndexCallback(&i.A3, tail[o6:o7], 4, 400, func(ii uint64, buf []byte) (err error) {
		i.A3[ii], buf = ssz.UnmarshallValue[uint32](buf)
		return nil
	}); err != nil {
		return nil, err
	}

	// Field (7) 'A4'
	if err = ssz.UnmarshalSliceWithIndexCallback(&i.A4, tail[o7:], 8, 400, func(ii uint64, buf []byte) (err error) {
		i.A4[ii], buf = ssz.UnmarshallValue[uint64](buf)
		return nil
	}); err != nil {
		return nil, err
	}

	return
}

// fixedSize returns the fixed size of the IntegrationUint object
func (i *IntegrationUint) fixedSize() int {
	return int(31)
}

// SizeSSZ returns the ssz encoded size in bytes for the IntegrationUint object
func (i *IntegrationUint) SizeSSZ() (size int) {
	size = i.fixedSize()

	// Field (4) 'A1'
	size += len(i.A1) * 1

	// Field (5) 'A2'
	size += len(i.A2) * 2

	// Field (6) 'A3'
	size += len(i.A3) * 4

	// Field (7) 'A4'
	size += len(i.A4) * 8

	return
}

// HashTreeRoot ssz hashes the IntegrationUint object
func (i *IntegrationUint) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the IntegrationUint object with a hasher
func (i *IntegrationUint) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'A'
	hh.PutUint8(i.A)

	// Field (1) 'B'
	hh.PutUint16(i.B)

	// Field (2) 'C'
	hh.PutUint32(i.C)

	// Field (3) 'D'
	hh.PutUint64(i.D)

	// Field (4) 'A1'
	{
		if size := uint64(len(i.A1)); size > 400 {
			err = ssz.ErrListTooBigFn("IntegrationUint.A1", size, 400)
			return
		}
		subIndx := hh.Index()
		for _, i := range i.A1 {
			hh.AppendUint8(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(i.A1))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(400, numItems, 1))
	}

	// Field (5) 'A2'
	{
		if size := uint64(len(i.A2)); size > 400 {
			err = ssz.ErrListTooBigFn("IntegrationUint.A2", size, 400)
			return
		}
		subIndx := hh.Index()
		for _, i := range i.A2 {
			hh.AppendUint16(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(i.A2))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(400, numItems, 2))
	}

	// Field (6) 'A3'
	{
		if size := uint64(len(i.A3)); size > 400 {
			err = ssz.ErrListTooBigFn("IntegrationUint.A3", size, 400)
			return
		}
		subIndx := hh.Index()
		for _, i := range i.A3 {
			hh.AppendUint32(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(i.A3))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(400, numItems, 4))
	}

	// Field (7) 'A4'
	{
		if size := uint64(len(i.A4)); size > 400 {
			err = ssz.ErrListTooBigFn("IntegrationUint.A4", size, 400)
			return
		}
		subIndx := hh.Index()
		for _, i := range i.A4 {
			hh.AppendUint64(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(i.A4))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(400, numItems, 8))
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the IntegrationUint object
func (i *IntegrationUint) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
