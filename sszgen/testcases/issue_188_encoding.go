// Code generated by fastssz. DO NOT EDIT.
// Hash: 30aec1d8f41f5794f021033f63f8cf9efab858eb65fbce8d8b7340aeb7775213
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Issue188 object
func (i *Issue188) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Issue188 object to a target array
func (i *Issue188) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Name'
	if size := len(i.Name); size != 32 {
		err = ssz.ErrBytesLengthFn("Issue188.Name", size, 32)
		return
	}
	dst = append(dst, i.Name...)

	// Field (1) 'Address'
	if size := len(i.Address); size != 32 {
		err = ssz.ErrBytesLengthFn("Issue188.Address", size, 32)
		return
	}
	dst = append(dst, i.Address...)

	return
}

// UnmarshalSSZ ssz unmarshals the Issue188 object
func (i *Issue188) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 64 {
		return ssz.ErrSize
	}

	// Field (0) 'Name'
	if cap(i.Name) == 0 {
		i.Name = make([]byte, 0, len(buf[0:32]))
	}
	i.Name = append(i.Name, buf[0:32]...)

	// Field (1) 'Address'
	if cap(i.Address) == 0 {
		i.Address = make([]byte, 0, len(buf[32:64]))
	}
	i.Address = append(i.Address, buf[32:64]...)

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Issue188 object
func (i *Issue188) SizeSSZ() (size int) {
	size = 64
	return
}

// HashTreeRoot ssz hashes the Issue188 object
func (i *Issue188) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Issue188 object with a hasher
func (i *Issue188) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Name'
	if size := len(i.Name); size != 32 {
		err = ssz.ErrBytesLengthFn("Issue188.Name", size, 32)
		return
	}
	hh.PutBytes(i.Name)

	// Field (1) 'Address'
	if size := len(i.Address); size != 32 {
		err = ssz.ErrBytesLengthFn("Issue188.Address", size, 32)
		return
	}
	hh.PutBytes(i.Address)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Issue188 object
func (i *Issue188) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
