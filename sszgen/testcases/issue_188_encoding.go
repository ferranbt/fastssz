// Code generated by fastssz. DO NOT EDIT.
// Hash: 30aec1d8f41f5794f021033f63f8cf9efab858eb65fbce8d8b7340aeb7775213
// Version: 2.0.0
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Issue188 object
func (i *Issue188) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Issue188 object to a target array
func (i *Issue188) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Name'
	if size := uint64(len(i.Name)); size != 32 {
		err = ssz.ErrBytesLengthFn("Issue188.Name", size, 32)
		return
	}
	dst = append(dst, i.Name...)

	// Field (1) 'Address'
	if size := uint64(len(i.Address)); size != 32 {
		err = ssz.ErrBytesLengthFn("Issue188.Address", size, 32)
		return
	}
	dst = append(dst, i.Address...)

	return
}

// UnmarshalSSZ ssz unmarshals the Issue188 object
func (i *Issue188) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(i, buf)
}

// UnmarshalSSZTail unmarshals the Issue188 object and returns the remaining bufferÂº
func (i *Issue188) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := i.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	// Field (0) 'Name'
	i.Name, buf = ssz.UnmarshalBytes(i.Name, buf, 32)

	// Field (1) 'Address'
	i.Address, buf = ssz.UnmarshalBytes(i.Address, buf, 32)

	return buf, nil
}

// fixedSize returns the fixed size of the Issue188 object
func (i *Issue188) fixedSize() int {
	return int(64)
}

// SizeSSZ returns the ssz encoded size in bytes for the Issue188 object
func (i *Issue188) SizeSSZ() (size int) {
	size = i.fixedSize()
	return
}

// HashTreeRoot ssz hashes the Issue188 object
func (i *Issue188) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Issue188 object with a hasher
func (i *Issue188) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Name'
	if size := uint64(len(i.Name)); size != 32 {
		err = ssz.ErrBytesLengthFn("Issue188.Name", size, 32)
		return
	}
	hh.PutBytes(i.Name)

	// Field (1) 'Address'
	if size := uint64(len(i.Address)); size != 32 {
		err = ssz.ErrBytesLengthFn("Issue188.Address", size, 32)
		return
	}
	hh.PutBytes(i.Address)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Issue188 object
func (i *Issue188) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
