// Code generated by fastssz. DO NOT EDIT.
// Hash: b35462b93b5ec0e1c9d9c7f2da382a9fb37543169a41064ce4421ecac43f7f62
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
	"github.com/ferranbt/fastssz/sszgen/testcases/other"
	alias "github.com/ferranbt/fastssz/sszgen/testcases/other2"
)

// MarshalSSZ ssz marshals the Case4 object
func (c *Case4) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Case4 object to a target array
func (c *Case4) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'A'
	if dst, err = c.A.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (1) 'B'
	if c.B == nil {
		c.B = new(other.Case4Interface)
	}
	if dst, err = c.B.MarshalSSZTo(dst); err != nil {
		return
	}

	// Field (2) 'C'
	dst = ssz.MarshalValue(dst, uint64(c.C))

	// Field (3) 'D'
	if size := len(c.D); size != 96 {
		err = ssz.ErrBytesLengthFn("Case4.D", size, 96)
		return
	}
	dst = append(dst, c.D...)

	// Field (4) 'E'
	dst = append(dst, c.E[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Case4 object
func (c *Case4) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(c, buf)
}

// UnmarshalSSZTail unmarshals the Case4 object and returns the remaining bufferÂº
func (c *Case4) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := uint64(len(buf))
	if size < 200 {
		return nil, ssz.ErrSize
	}

	// Field (0) 'A'
	if buf, err = c.A.UnmarshalSSZTail(buf); err != nil {
		return
	}

	// Field (1) 'B'
	if buf, err = ssz.UnmarshalFieldTail(&c.B, buf); err != nil {
		return
	}

	// Field (2) 'C'
	{
		var val uint64
		val, buf = ssz.UnmarshallValue[uint64](buf)
		c.C = alias.Case4Slot(val)
	}

	// Field (3) 'D'
	c.D, buf = ssz.UnmarshalBytes(c.D, buf, 96)

	// Field (4) 'E'
	buf = ssz.UnmarshalFixedBytes(c.E[:], buf)

	return buf, nil
}

// SizeSSZ returns the ssz encoded size in bytes for the Case4 object
func (c *Case4) SizeSSZ() (size int) {
	size = 200
	return
}

// HashTreeRoot ssz hashes the Case4 object
func (c *Case4) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Case4 object with a hasher
func (c *Case4) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'A'
	if err = c.A.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (1) 'B'
	if c.B == nil {
		c.B = new(other.Case4Interface)
	}
	if err = c.B.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (2) 'C'
	hh.PutUint64(uint64(c.C))

	// Field (3) 'D'
	if size := len(c.D); size != 96 {
		err = ssz.ErrBytesLengthFn("Case4.D", size, 96)
		return
	}
	hh.PutBytes(c.D)

	// Field (4) 'E'
	hh.PutBytes(c.E[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Case4 object
func (c *Case4) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
