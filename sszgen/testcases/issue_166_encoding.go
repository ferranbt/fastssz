// Code generated by fastssz. DO NOT EDIT.
// Hash: 36c315b5fc8f7a1b096257ec1c13f01f8c637ca29ea080ed3391033a454203cd
// Version: 2.0.0
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Issue165 object
func (i *Issue165) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Issue165 object to a target array
func (i *Issue165) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := i.fixedSize()

	// Offset (0) 'A'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(i.A)

	// Offset (1) 'B'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'A'
	if size := uint64(len(i.A)); size > 0 {
		err = ssz.ErrBytesLengthFn("Issue165.A", size, 0)
		return
	}
	dst = append(dst, i.A...)

	// Field (1) 'B'
	if size := uint64(len(i.B)); size > 0 {
		err = ssz.ErrBytesLengthFn("Issue165.B", size, 0)
		return
	}
	dst = append(dst, i.B...)

	return
}

// UnmarshalSSZ ssz unmarshals the Issue165 object
func (i *Issue165) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(i, buf)
}

// UnmarshalSSZTail unmarshals the Issue165 object and returns the remaining bufferÂº
func (i *Issue165) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := i.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	tail := buf
	var o0, o1 uint64
	marker := ssz.NewOffsetMarker(uint64(size), uint64(fixedSize))

	// Offset (0) 'A'
	if o0, buf, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Offset (1) 'B'
	if o1, _, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Field (0) 'A'
	if i.A, err = ssz.UnmarshalDynamicBytes(i.A, tail[o0:o1], 0); err != nil {
		return
	}

	// Field (1) 'B'
	if i.B, err = ssz.UnmarshalDynamicBytes(i.B, tail[o1:], 0); err != nil {
		return
	}

	return
}

// fixedSize returns the fixed size of the Issue165 object
func (i *Issue165) fixedSize() int {
	return int(8)
}

// SizeSSZ returns the ssz encoded size in bytes for the Issue165 object
func (i *Issue165) SizeSSZ() (size int) {
	size = i.fixedSize()

	// Field (0) 'A'
	size += len(i.A)

	// Field (1) 'B'
	size += len(i.B)

	return
}

// HashTreeRoot ssz hashes the Issue165 object
func (i *Issue165) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Issue165 object with a hasher
func (i *Issue165) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'A'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(i.A))
		if byteLen > 0 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(i.A)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (0+31)/32)
	}

	// Field (1) 'B'
	{
		elemIndx := hh.Index()
		byteLen := uint64(len(i.B))
		if byteLen > 0 {
			err = ssz.ErrIncorrectListSize
			return
		}
		hh.Append(i.B)
		hh.MerkleizeWithMixin(elemIndx, byteLen, (0+31)/32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Issue165 object
func (i *Issue165) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
