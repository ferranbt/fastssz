// Code generated by fastssz. DO NOT EDIT.
// Hash: a828d145cd16b38167d96bbb9b96b7c099e9d5fd48b48c068f1804506f72a3e4
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Issue159[B] object
func (i *Issue159[B]) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(i)
}

// MarshalSSZTo ssz marshals the Issue159[B] object to a target array
func (i *Issue159[B]) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Data'
	dst = append(dst, i.Data[:]...)

	// Field (1) 'Data2'
	dst = append(dst, i.Data2[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the Issue159[B] object
func (i *Issue159[B]) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 90 {
		return ssz.ErrSize
	}

	// Field (0) 'Data'
	ssz.UnmarshalFixedBytes(i.Data[:], buf[0:48])

	// Field (1) 'Data2'
	ssz.UnmarshalFixedBytes(i.Data2[:], buf[48:90])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Issue159[B] object
func (i *Issue159[B]) SizeSSZ() (size int) {
	size = 90
	return
}

// HashTreeRoot ssz hashes the Issue159[B] object
func (i *Issue159[B]) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(i)
}

// HashTreeRootWith ssz hashes the Issue159[B] object with a hasher
func (i *Issue159[B]) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Data'
	hh.PutBytes(i.Data[:])

	// Field (1) 'Data2'
	hh.PutBytes(i.Data2[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Issue159[B] object
func (i *Issue159[B]) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(i)
}
