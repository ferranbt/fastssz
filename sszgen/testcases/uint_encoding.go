// Code generated by fastssz. DO NOT EDIT.
// Hash: a58c2659c9995524aa00aaa7e97600338e9a844b877948cbb37e3fb620c5e8a6
// Version: 2.0.0
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Uints object
func (u *Uints) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(u)
}

// MarshalSSZTo ssz marshals the Uints object to a target array
func (u *Uints) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Uint8'
	dst = ssz.MarshalValue(dst, uint8(u.Uint8))

	// Field (1) 'Uint16'
	dst = ssz.MarshalValue(dst, uint16(u.Uint16))

	// Field (2) 'Uint32'
	dst = ssz.MarshalValue(dst, uint32(u.Uint32))

	// Field (3) 'Uint64'
	dst = ssz.MarshalValue(dst, uint64(u.Uint64))

	return
}

// UnmarshalSSZ ssz unmarshals the Uints object
func (u *Uints) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(u, buf)
}

// UnmarshalSSZTail unmarshals the Uints object and returns the remaining bufferÂº
func (u *Uints) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := u.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	// Field (0) 'Uint8'
	{
		var val uint8
		val, buf = ssz.UnmarshallValue[uint8](buf)
		u.Uint8 = Uint8(val)
	}

	// Field (1) 'Uint16'
	{
		var val uint16
		val, buf = ssz.UnmarshallValue[uint16](buf)
		u.Uint16 = Uint16(val)
	}

	// Field (2) 'Uint32'
	{
		var val uint32
		val, buf = ssz.UnmarshallValue[uint32](buf)
		u.Uint32 = Uint32(val)
	}

	// Field (3) 'Uint64'
	{
		var val uint64
		val, buf = ssz.UnmarshallValue[uint64](buf)
		u.Uint64 = Uint64(val)
	}

	return buf, nil
}

// fixedSize returns the fixed size of the Uints object
func (u *Uints) fixedSize() int {
	return int(15)
}

// SizeSSZ returns the ssz encoded size in bytes for the Uints object
func (u *Uints) SizeSSZ() (size int) {
	size = u.fixedSize()
	return
}

// HashTreeRoot ssz hashes the Uints object
func (u *Uints) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(u)
}

// HashTreeRootWith ssz hashes the Uints object with a hasher
func (u *Uints) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Uint8'
	hh.PutUint8(uint8(u.Uint8))

	// Field (1) 'Uint16'
	hh.PutUint16(uint16(u.Uint16))

	// Field (2) 'Uint32'
	hh.PutUint32(uint32(u.Uint32))

	// Field (3) 'Uint64'
	hh.PutUint64(uint64(u.Uint64))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Uints object
func (u *Uints) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(u)
}
