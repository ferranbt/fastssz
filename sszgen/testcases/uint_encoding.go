// Code generated by fastssz. DO NOT EDIT.
// Hash: a58c2659c9995524aa00aaa7e97600338e9a844b877948cbb37e3fb620c5e8a6
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Uints object
func (u *Uints) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(u)
}

// MarshalSSZTo ssz marshals the Uints object to a target array
func (u *Uints) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Uint8'
	dst = ssz.MarshalUint8(dst, uint8(u.Uint8))

	// Field (1) 'Uint16'
	dst = ssz.MarshalUint16(dst, uint16(u.Uint16))

	// Field (2) 'Uint32'
	dst = ssz.MarshalUint32(dst, uint32(u.Uint32))

	// Field (3) 'Uint64'
	dst = ssz.MarshalUint64(dst, uint64(u.Uint64))

	return
}

// UnmarshalSSZ ssz unmarshals the Uints object
func (u *Uints) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 15 {
		return ssz.ErrSize
	}

	// Field (0) 'Uint8'
	u.Uint8 = Uint8(ssz.UnmarshallUint8(buf[0:1]))

	// Field (1) 'Uint16'
	u.Uint16 = Uint16(ssz.UnmarshallUint16(buf[1:3]))

	// Field (2) 'Uint32'
	u.Uint32 = Uint32(ssz.UnmarshallUint32(buf[3:7]))

	// Field (3) 'Uint64'
	u.Uint64 = Uint64(ssz.UnmarshallUint64(buf[7:15]))

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the Uints object
func (u *Uints) SizeSSZ() (size int) {
	size = 15
	return
}

// HashTreeRoot ssz hashes the Uints object
func (u *Uints) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(u)
}

// HashTreeRootWith ssz hashes the Uints object with a hasher
func (u *Uints) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Uint8'
	hh.PutUint8(uint8(u.Uint8))

	// Field (1) 'Uint16'
	hh.PutUint16(uint16(u.Uint16))

	// Field (2) 'Uint32'
	hh.PutUint32(uint32(u.Uint32))

	// Field (3) 'Uint64'
	hh.PutUint64(uint64(u.Uint64))

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Uints object
func (u *Uints) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(u)
}
