// Code generated by fastssz. DO NOT EDIT.
// Hash: b05b1d4bd1edc06c10690d812bb9c15ef308ef91a59c5c38b2a8215f12440e48
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Vec object
func (v *Vec) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the Vec object to a target array
func (v *Vec) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Values'
	if size := uint64(len(v.Values)); size != 6 {
		err = ssz.ErrVectorLengthFn("Vec.Values", size, 6)
		return
	}
	for ii := uint64(0); ii < 6; ii++ {
		dst = ssz.MarshalValue(dst, v.Values[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Vec object
func (v *Vec) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(v, buf)
}

// UnmarshalSSZTail unmarshals the Vec object and returns the remaining bufferº
func (v *Vec) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := v.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	// Field (0) 'Values'
	v.Values = ssz.Extend(v.Values, 6)
	for ii := uint64(0); ii < 6; ii++ {
		v.Values[ii], buf = ssz.UnmarshallValue[uint64](buf)
	}

	return buf, nil
}

// fixedSize returns the fixed size of the Vec object
func (v *Vec) fixedSize() int {
	return int(48)
}

// SizeSSZ returns the ssz encoded size in bytes for the Vec object
func (v *Vec) SizeSSZ() (size int) {
	size = v.fixedSize()
	return
}

// HashTreeRoot ssz hashes the Vec object
func (v *Vec) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the Vec object with a hasher
func (v *Vec) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Values'
	{
		if size := uint64(len(v.Values)); size != 6 {
			err = ssz.ErrVectorLengthFn("Vec.Values", size, 6)
			return
		}
		subIndx := hh.Index()
		for _, i := range v.Values {
			hh.AppendUint64(i)
		}
		hh.Merkleize(subIndx)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Vec object
func (v *Vec) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}

// MarshalSSZ ssz marshals the Vec2 object
func (v *Vec2) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the Vec2 object to a target array
func (v *Vec2) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := v.fixedSize()

	// Offset (0) 'Values2'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'Values2'
	if size := uint64(len(v.Values2)); size > 100 {
		err = ssz.ErrListTooBigFn("Vec2.Values2", size, 100)
		return
	}
	for ii := 0; ii < len(v.Values2); ii++ {
		dst = ssz.MarshalValue(dst, v.Values2[ii])
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Vec2 object
func (v *Vec2) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(v, buf)
}

// UnmarshalSSZTail unmarshals the Vec2 object and returns the remaining bufferº
func (v *Vec2) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := v.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	tail := buf
	var o0 uint64
	marker := ssz.NewOffsetMarker(uint64(size), uint64(fixedSize))

	// Offset (0) 'Values2'
	if o0, buf, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Field (0) 'Values2'
	if err = ssz.UnmarshalSliceWithIndexCallback(&v.Values2, tail[o0:], 4, 100, func(ii uint64, buf []byte) (err error) {
		v.Values2[ii], buf = ssz.UnmarshallValue[uint32](buf)
		return nil
	}); err != nil {
		return nil, err
	}

	return
}

// fixedSize returns the fixed size of the Vec2 object
func (v *Vec2) fixedSize() int {
	return int(4)
}

// SizeSSZ returns the ssz encoded size in bytes for the Vec2 object
func (v *Vec2) SizeSSZ() (size int) {
	size = v.fixedSize()

	// Field (0) 'Values2'
	size += len(v.Values2) * 4

	return
}

// HashTreeRoot ssz hashes the Vec2 object
func (v *Vec2) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the Vec2 object with a hasher
func (v *Vec2) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Values2'
	{
		if size := uint64(len(v.Values2)); size > 100 {
			err = ssz.ErrListTooBigFn("Vec2.Values2", size, 100)
			return
		}
		subIndx := hh.Index()
		for _, i := range v.Values2 {
			hh.AppendUint32(i)
		}
		hh.FillUpTo32()
		numItems := uint64(len(v.Values2))
		hh.MerkleizeWithMixin(subIndx, numItems, ssz.CalculateLimit(100, numItems, 4))
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Vec2 object
func (v *Vec2) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}
