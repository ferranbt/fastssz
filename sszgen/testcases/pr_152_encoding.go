// Code generated by fastssz. DO NOT EDIT.
// Hash: a1417b1ba98dd88487fed43eb0d4318795e0167678977e8efcc677d580c70d81
// Version: 2.0.0
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PR1512 object
func (p *PR1512) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PR1512 object to a target array
func (p *PR1512) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := p.fixedSize()

	// Offset (0) 'D'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'D'
	if size := uint64(len(p.D)); size > 32 {
		err = ssz.ErrListTooBigFn("PR1512.D", size, 32)
		return
	}
	for ii := 0; ii < len(p.D); ii++ {
		dst = append(dst, p.D[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the PR1512 object
func (p *PR1512) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(p, buf)
}

// UnmarshalSSZTail unmarshals the PR1512 object and returns the remaining bufferÂº
func (p *PR1512) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := p.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	tail := buf
	var o0 uint64
	marker := ssz.NewOffsetMarker(uint64(size), uint64(fixedSize))

	// Offset (0) 'D'
	if o0, _, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Field (0) 'D'
	if err = ssz.UnmarshalSliceWithIndexCallback(&p.D, tail[o0:], 48, 32, func(ii uint64, buf []byte) (err error) {
		buf = ssz.UnmarshalFixedBytes(p.D[ii][:], buf)
		return nil
	}); err != nil {
		return nil, err
	}

	return
}

// fixedSize returns the fixed size of the PR1512 object
func (p *PR1512) fixedSize() int {
	return int(4)
}

// SizeSSZ returns the ssz encoded size in bytes for the PR1512 object
func (p *PR1512) SizeSSZ() (size int) {
	size = p.fixedSize()

	// Field (0) 'D'
	size += len(p.D) * 48

	return
}

// HashTreeRoot ssz hashes the PR1512 object
func (p *PR1512) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PR1512 object with a hasher
func (p *PR1512) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'D'
	{
		if size := uint64(len(p.D)); size > 32 {
			err = ssz.ErrListTooBigFn("PR1512.D", size, 32)
			return
		}
		subIndx := hh.Index()
		for _, i := range p.D {
			hh.PutBytes(i[:])
		}
		numItems := uint64(len(p.D))
		hh.MerkleizeWithMixin(subIndx, numItems, 32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PR1512 object
func (p *PR1512) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}
