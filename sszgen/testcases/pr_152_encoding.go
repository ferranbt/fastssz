// Code generated by fastssz. DO NOT EDIT.
// Hash: a1417b1ba98dd88487fed43eb0d4318795e0167678977e8efcc677d580c70d81
// Version: 0.1.3
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the PR1512 object
func (p *PR1512) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(p)
}

// MarshalSSZTo ssz marshals the PR1512 object to a target array
func (p *PR1512) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'D'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'D'
	if size := len(p.D); size > 32 {
		err = ssz.ErrListTooBigFn("PR1512.D", size, 32)
		return
	}
	for ii := 0; ii < len(p.D); ii++ {
		dst = append(dst, p.D[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the PR1512 object
func (p *PR1512) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'D'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 != 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'D'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 48, 32)
		if err != nil {
			return err
		}
		p.D = make([]Data152, num)
		for ii := 0; ii < num; ii++ {
			copy(p.D[ii][:], buf[ii*48:(ii+1)*48])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the PR1512 object
func (p *PR1512) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'D'
	size += len(p.D) * 48

	return
}

// HashTreeRoot ssz hashes the PR1512 object
func (p *PR1512) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(p)
}

// HashTreeRootWith ssz hashes the PR1512 object with a hasher
func (p *PR1512) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'D'
	{
		if size := len(p.D); size > 32 {
			err = ssz.ErrListTooBigFn("PR1512.D", size, 32)
			return
		}
		subIndx := hh.Index()
		for _, i := range p.D {
			hh.PutBytes(i[:])
		}
		numItems := uint64(len(p.D))
		hh.MerkleizeWithMixin(subIndx, numItems, 32)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the PR1512 object
func (p *PR1512) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(p)
}
