// Code generated by fastssz. DO NOT EDIT.
// Hash: 44566646e4c1498bce3271d6c03a9108bb4af48414b1d759c07e3572846863f1
// Version: 2.0.0
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Case2A object
func (c *Case2A) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Case2A object to a target array
func (c *Case2A) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'A'
	dst = ssz.MarshalValue(dst, c.A)

	return
}

// UnmarshalSSZ ssz unmarshals the Case2A object
func (c *Case2A) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(c, buf)
}

// UnmarshalSSZTail unmarshals the Case2A object and returns the remaining bufferº
func (c *Case2A) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := c.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	// Field (0) 'A'
	c.A, buf = ssz.UnmarshallValue[uint64](buf)

	return buf, nil
}

// fixedSize returns the fixed size of the Case2A object
func (c *Case2A) fixedSize() int {
	return int(8)
}

// SizeSSZ returns the ssz encoded size in bytes for the Case2A object
func (c *Case2A) SizeSSZ() (size int) {
	size = c.fixedSize()
	return
}

// HashTreeRoot ssz hashes the Case2A object
func (c *Case2A) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Case2A object with a hasher
func (c *Case2A) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'A'
	hh.PutUint64(c.A)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Case2A object
func (c *Case2A) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}

// MarshalSSZ ssz marshals the Case2B object
func (c *Case2B) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Case2B object to a target array
func (c *Case2B) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'A'
	dst = ssz.MarshalValue(dst, c.A)

	// Field (1) 'B'
	dst = ssz.MarshalValue(dst, c.B)

	return
}

// UnmarshalSSZ ssz unmarshals the Case2B object
func (c *Case2B) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(c, buf)
}

// UnmarshalSSZTail unmarshals the Case2B object and returns the remaining bufferº
func (c *Case2B) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := c.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	// Field (0) 'A'
	c.A, buf = ssz.UnmarshallValue[uint64](buf)

	// Field (1) 'B'
	c.B, buf = ssz.UnmarshallValue[uint64](buf)

	return buf, nil
}

// fixedSize returns the fixed size of the Case2B object
func (c *Case2B) fixedSize() int {
	return int(16)
}

// SizeSSZ returns the ssz encoded size in bytes for the Case2B object
func (c *Case2B) SizeSSZ() (size int) {
	size = c.fixedSize()
	return
}

// HashTreeRoot ssz hashes the Case2B object
func (c *Case2B) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Case2B object with a hasher
func (c *Case2B) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'A'
	hh.PutUint64(c.A)

	// Field (1) 'B'
	hh.PutUint64(c.B)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Case2B object
func (c *Case2B) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
