// Code generated by fastssz. DO NOT EDIT.
// Hash: af56ac74ccaeb89b8d2d802f56cbfab0248f088a80a7879c0e2f0fb8ca88f22c
// Version: 2.0.0
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the Case7 object
func (c *Case7) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the Case7 object to a target array
func (c *Case7) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := c.fixedSize()

	// Offset (0) 'BlobKzgs'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'BlobKzgs'
	if size := uint64(len(c.BlobKzgs)); size > 16 {
		err = ssz.ErrListTooBigFn("Case7.BlobKzgs", size, 16)
		return
	}
	for ii := 0; ii < len(c.BlobKzgs); ii++ {
		if size := uint64(len(c.BlobKzgs[ii])); size != 48 {
			err = ssz.ErrBytesLengthFn("Case7.BlobKzgs[ii]", size, 48)
			return
		}
		dst = append(dst, c.BlobKzgs[ii]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the Case7 object
func (c *Case7) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(c, buf)
}

// UnmarshalSSZTail unmarshals the Case7 object and returns the remaining bufferÂº
func (c *Case7) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := c.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	tail := buf
	var o0 uint64
	marker := ssz.NewOffsetMarker(uint64(size), uint64(fixedSize))

	// Offset (0) 'BlobKzgs'
	if o0, _, err = marker.ReadOffset(buf); err != nil {
		return nil, err
	}

	// Field (0) 'BlobKzgs'
	if err = ssz.UnmarshalSliceWithIndexCallback(&c.BlobKzgs, tail[o0:], 48, 16, func(ii uint64, buf []byte) (err error) {
		c.BlobKzgs[ii], buf = ssz.UnmarshalBytes(c.BlobKzgs[ii], buf, 48)
		return nil
	}); err != nil {
		return nil, err
	}

	return
}

// fixedSize returns the fixed size of the Case7 object
func (c *Case7) fixedSize() int {
	return int(4)
}

// SizeSSZ returns the ssz encoded size in bytes for the Case7 object
func (c *Case7) SizeSSZ() (size int) {
	size = c.fixedSize()

	// Field (0) 'BlobKzgs'
	size += len(c.BlobKzgs) * 48

	return
}

// HashTreeRoot ssz hashes the Case7 object
func (c *Case7) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the Case7 object with a hasher
func (c *Case7) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'BlobKzgs'
	{
		if size := uint64(len(c.BlobKzgs)); size > 16 {
			err = ssz.ErrListTooBigFn("Case7.BlobKzgs", size, 16)
			return
		}
		subIndx := hh.Index()
		for _, i := range c.BlobKzgs {
			if len(i) != 48 {
				err = ssz.ErrBytesLength
				return
			}
			hh.PutBytes(i)
		}
		numItems := uint64(len(c.BlobKzgs))
		hh.MerkleizeWithMixin(subIndx, numItems, 16)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the Case7 object
func (c *Case7) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}
