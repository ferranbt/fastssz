// Code generated by fastssz. DO NOT EDIT.
// Hash: 6f5a14869c34eaa8a51c3e53aea4825a94e51f432396697cc9ad28007dcc1198
// Version: 0.1.4
package testcases

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the TimeType object
func (t *TimeType) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TimeType object to a target array
func (t *TimeType) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Timestamp'
	dst = ssz.MarshalTime(dst, t.Timestamp)

	// Field (1) 'Int'
	dst = ssz.MarshalValue(dst, t.Int)

	return
}

// UnmarshalSSZ ssz unmarshals the TimeType object
func (t *TimeType) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(t, buf)
}

// UnmarshalSSZTail unmarshals the TimeType object and returns the remaining bufferº
func (t *TimeType) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := t.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	// Field (0) 'Timestamp'
	t.Timestamp, buf = ssz.UnmarshalTime(buf)

	// Field (1) 'Int'
	t.Int, buf = ssz.UnmarshallValue[uint64](buf)

	return buf, nil
}

// fixedSize returns the fixed size of the TimeType object
func (t *TimeType) fixedSize() int {
	return int(16)
}

// SizeSSZ returns the ssz encoded size in bytes for the TimeType object
func (t *TimeType) SizeSSZ() (size int) {
	size = t.fixedSize()
	return
}

// HashTreeRoot ssz hashes the TimeType object
func (t *TimeType) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TimeType object with a hasher
func (t *TimeType) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Timestamp'
	hh.PutUint64(uint64(t.Timestamp.Unix()))

	// Field (1) 'Int'
	hh.PutUint64(t.Int)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the TimeType object
func (t *TimeType) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(t)
}

// MarshalSSZ ssz marshals the TimeRawType object
func (t *TimeRawType) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(t)
}

// MarshalSSZTo ssz marshals the TimeRawType object to a target array
func (t *TimeRawType) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Timestamp'
	dst = ssz.MarshalValue(dst, t.Timestamp)

	// Field (1) 'Int'
	dst = ssz.MarshalValue(dst, t.Int)

	return
}

// UnmarshalSSZ ssz unmarshals the TimeRawType object
func (t *TimeRawType) UnmarshalSSZ(buf []byte) error {
	return ssz.UnmarshalSSZ(t, buf)
}

// UnmarshalSSZTail unmarshals the TimeRawType object and returns the remaining bufferº
func (t *TimeRawType) UnmarshalSSZTail(buf []byte) (rest []byte, err error) {
	size := len(buf)
	fixedSize := t.fixedSize()
	if size < fixedSize {
		return nil, ssz.ErrSize
	}

	// Field (0) 'Timestamp'
	t.Timestamp, buf = ssz.UnmarshallValue[uint64](buf)

	// Field (1) 'Int'
	t.Int, buf = ssz.UnmarshallValue[uint64](buf)

	return buf, nil
}

// fixedSize returns the fixed size of the TimeRawType object
func (t *TimeRawType) fixedSize() int {
	return int(16)
}

// SizeSSZ returns the ssz encoded size in bytes for the TimeRawType object
func (t *TimeRawType) SizeSSZ() (size int) {
	size = t.fixedSize()
	return
}

// HashTreeRoot ssz hashes the TimeRawType object
func (t *TimeRawType) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(t)
}

// HashTreeRootWith ssz hashes the TimeRawType object with a hasher
func (t *TimeRawType) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Timestamp'
	hh.PutUint64(t.Timestamp)

	// Field (1) 'Int'
	hh.PutUint64(t.Int)

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the TimeRawType object
func (t *TimeRawType) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(t)
}
